#include <iostream>
using namespace std;
int max(int a, int b){
    return a > b ? a : b;
}
class Node
{  
    public: 
    int key;  
    Node *left;  
    Node *right;  
    int height;
};
int height(Node *N){
    if(N == NULL){
        return 0;
    }
    return N->height;
}
Node* newNode(int key)  
{  
    Node* node = new Node(); 
    node->key = key;  
    node->left = NULL;  
    node->right = NULL;  
    node->height = 1;

    return(node);  
}
Node *rightRotate(Node *x) {
    Node *y = x->left;
    Node *newLeftX = y->right;
    y->right = x;  
    x->left = newLeftX;
    // Now y is the new root and it is balance
    // Update heights  
    x->height = max(height(x->left), 
                    height(x->right)) + 1;
    y->height = max(height(y->left), 
                    height(y->right)) + 1;
    // Return new root  
    return y;
}
Node *leftRotate(Node *x)  
{  
    Node *y = x->right;  
    Node *newRightX = y->left;
    y->left = x;  
    x->right = newRightX;  
    // Now y is the new root and it is balance
    // Update heights  
    x->height = max(height(x->left),     
                    height(x->right)) + 1;  
    y->height = max(height(y->left),  
                    height(y->right)) + 1;  

    // Return new root  
    return y;  
}
int getBalance(Node *N)  
{  
    if (N == NULL)  
        return 0;  
    return height(N->left) - height(N->right);
}
Node* insert(Node* node, int key,int k)  
{  
    if (node == NULL){
        cout << key << ": Accept\n";
        return(newNode(key));  
    }

    if(key == node->key) {
        cout << key << ": No\n";
        return node;
    }

    if (key < node->key){
        if(key + k > node->key ){
            cout << key << ": No\n";
            return node;
        }
        node->left = insert(node->left, key, k);  
    }
    if (key > node->key){
        if(key - k < node->key ){
            cout << key << ": No\n";
            return node;
        }
        node->right = insert(node->right, key, k);  
    }
    
    node->height = 1 + max(height(node->left),  
                        height(node->right));  
  

    int balance = getBalance(node);  

    // Left Left Case  
    if (balance > 1 && key < node->left->key)  
        return rightRotate(node);  
  
    // Right Right Case  
    if (balance < -1 && key > node->right->key)  
        return leftRotate(node);  
  
    // Left Right Case  
    if (balance > 1 && key > node->left->key)  
    {  
        node->left = leftRotate(node->left);  
        return rightRotate(node);  
    }  
  
    // Right Left Case  
    if (balance < -1 && key < node->right->key)  
    {  
        node->right = rightRotate(node->right);  
        return leftRotate(node);  
    }  
  
    /* return the (unchanged) node pointer */
    return node;  
}
Node * root = NULL;
int k = 3;
// {37, 41, 46, 49, 56}
root = insert(root,37,k);
int current = 37;
root = insert(root,41,k);
root = insert(root,46,k);
root = insert(root,49,k);
root = insert(root,56,k);
